#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>
using namespace std;

bool visited[50][50] = {false,};
int map[50][50];
int dx[4] = {1, 0, -1, 0};
int dy[4] = {0, 1, 0, -1};

void bfs(int x, int y, int m, int n) {
    queue<pair<int, int>> q;
    q.push({x, y});
    visited[x][y] = true;

    while (!q.empty()) {
        int cx = q.front().first;
        int cy = q.front().second;
        q.pop();

        for (int i = 0; i < 4; i++) {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            if (nx >= 0 && nx < m && ny >= 0 && ny < n && !visited[nx][ny] && map[nx][ny] == 1) {
                visited[nx][ny] = true;
                q.push({nx, ny});
            }
        }
    }
}

int main() {
    int t;
    cin >> t;
    while (t--) {
        int m, n, k;
        cin >> m >> n >> k;

        for (int i = 0; i < m; i++) {
            fill(map[i], map[i] + n, 0);
            fill(visited[i], visited[i] + n, false);
        }

        for (int i = 0; i < k; i++) {
            int x, y;
            cin >> x >> y;
            map[x][y] = 1;
        }

        int worm_count = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (map[i][j] == 1 && !visited[i][j]) {
                    bfs(i, j, m, n);
                    worm_count++;
                }
            }
        }

        cout << worm_count << endl;
    }

    return 0;
}
