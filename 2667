#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
#include <string>

using namespace std;

bool visited[25][25] = {false,};
int map[25][25];
int dx[4] = { 1, 0, -1, 0 };
int dy[4] = { 0, 1, 0, -1 };

int bfs(int x, int y, int n) {
    queue<pair<int, int>> q;
    q.push({x, y});
    int count = 0;
    visited[x][y] = true;

    while (!q.empty()) {
        int cx = q.front().first;
        int cy = q.front().second;
        q.pop();
        count += 1;

        for (int i = 0; i < 4; i++) {
            int nx = cx + dx[i];
            int ny = cy + dy[i];

            // 경계 검사 추가
            if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] && map[nx][ny] == 1) {
                visited[nx][ny] = true;
                q.push({nx, ny});
            }
        }
    }
    return count;
}

int main() {
    int n;
    cin >> n;

    for (int i = 0; i < n; i++) {
        string input;
        cin >> input;
        for (int j = 0; j < n; j++) {
            map[i][j] = input[j] - '0';
        }
    }

    vector<int> res;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (map[i][j] == 1 && !visited[i][j]) {
                int count = bfs(i, j, n);
                if (count != 0) res.push_back(count);
            }
        }
    }

    sort(res.begin(), res.end());
    cout << res.size() << endl;
    for (const auto& s : res) {
        cout << s << endl;
    }

    return 0;
}
